Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:


Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.

CODE:

class Solution {
    public ListNode middleNode(ListNode head) {
        if(head.next==null){
            return head;
        }
        ListNode temp=head;
        ListNode curr=head;
        int size=1;
        int mid=0;
        while(temp!=null){
            temp=temp.next;
            size=size+1;
        }
        if(size%2==0){
            mid=size/2;
        }else{
            mid=(size+1)/2;
        }
        int i=0;
        while(i<mid-2){
            curr=curr.next;
            i++;
        }head=curr.next;
        curr.next=null;
        return head;
    }
}
